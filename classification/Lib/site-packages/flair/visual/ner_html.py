import html
from typing import Union, List

from flair.data import Sentence

TAGGED_ENTITY = """
<mark class="entity" style="color:#ccb39e; background:#333333; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 3; border-radius: 0.8em; box-decoration-break: clone; -webkit-box-decoration-break: clone">
    {entity}
    <span style="color:#f2f2f2; font-size: 0.8em; font-weight: bold; line-height: 3; border-radius: 0.45em; text-transform: uppercase; vertical-align: middle; margin-left: 0.5rem">{label}</span>
</mark>
"""

PARAGRAPH = """<p>{sentence}</p>"""

HTML_PAGE = """

<!DOCTYPE html>
<html style="font-size: 16px;"lang="en">
  <head>
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="utf-8">
    <meta name="keywords" content="Full width text">
    <meta name="description" content="">
    <meta name="page_type" content="np-template-header-footer-from-plugin">
    <title>Copy of About 1</title>
    <link rel="stylesheet" href="E:/PycharmProjects/DL/Doc_IMG-OCR/NER_page.css" media="screen">
    <link id="u-theme-google-font" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i|Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i">
</head>
  <body class="u-body">
    
    <section class="u-align-left u-clearfix u-grey-5 u-section-2" id="sec-4e46">
      <div class="u-clearfix u-sheet u-sheet-1">
        <h2 class="u-text u-text-1">{title} TENDER</h2>
        <h6 class="u-text u-text-2">Havells Intelligent Document Processor</h6>
        <section class="u-grey-80" style="padding:0.3em; width:40%;"></section>
        <div class="u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1">
          <div class="u-layout">
            <div class="u-layout">
              <div class="u-container-style u-layout-cell u-size-30 u-layout-cell-1">
                <div class="u-container-layout u-valign-top u-container-layout-1">
                  <p class="u-text u-text-default u-text-3">{text}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    
    
    <section class="u-backlink u-clearfix u-grey-80">
      <a class="u-link" href="https://havells.com" target="_blank">
        <span>Havells Intellegent extractor</span>
      </a>
      <p class="u-text">
        <span>created by</span>
      </p>
      <a class="u-link" href="mailto:utkarsh.kharayat@havells.com" target="_blank">
        <span>Havells New Technologies</span>
      </a>. 
    </section>
  </body>
</html>
"""


def split_to_spans(s: Sentence):
    orig = s.to_original_text()
    last_idx = 0
    spans = []
    tagged_ents = s.get_spans("ner",min_score=0.4)
    for ent in tagged_ents:
        if last_idx != ent.start_pos:
            spans.append((orig[last_idx : ent.start_pos], None))
        spans.append((ent.text, ent.tag))
        last_idx = ent.end_pos
    if last_idx < len(orig) - 1:
        spans.append((orig[last_idx : len(orig)], None))
    return spans


def render_ner_html(
    sentences: Union[List[Sentence], Sentence],
    title: str = "Flair",
    colors={
        "PER": "#F7FF53",
        "ORG": "#E8902E",
        "LOC": "#FF40A3",
        "MISC": "#4647EB",
        "O": "#ddd",
    },
    default_color: str = "#E8902E",
    wrap_page=True,
) -> str:
    """
    :param sentences: single sentence or list of sentences to convert to HTML
    :param title: title of the HTML page
    :param colors: dict where keys are tags and values are color HTML codes
    :param default_color: color to use if colors parameter is missing a tag
    :param wrap_page: if True method returns result of processing sentences wrapped by &lt;html&gt; and &lt;body&gt; tags, otherwise - without these tags
    :return: HTML as a string
    """
    if isinstance(sentences, Sentence):
        sentences = [sentences]
    sentences_html = []
    spans_html = list()
    for s in sentences:
        spans = split_to_spans(s)
        for fragment, tag in spans:
            escaped_fragment = html.escape(fragment).replace("\n", "<br/>")
            if tag:
                escaped_fragment = TAGGED_ENTITY.format(
                    entity=escaped_fragment,
                    label=tag,
                    color=colors.get(tag, default_color),
                )
            spans_html.append(escaped_fragment)
    line = PARAGRAPH.format(sentence="".join(spans_html))
    sentences_html.append(line)

    final_text = "".join(sentences_html)

    if wrap_page:
        return HTML_PAGE.format(text=final_text, title=title)
    else:
        return final_text
